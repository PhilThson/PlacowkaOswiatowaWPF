<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:converters="clr-namespace:PlacowkaOswiatowa.Helpers.Converters"
                    xmlns:custom="clr-namespace:PlacowkaOswiatowa.Helpers.CustomUI"
                    >

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/Views/Resources/Common.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <DropShadowEffect x:Key="StandardowyShadow"
                    Color="{StaticResource ShadowColor}"
                    ShadowDepth="8"
                    BlurRadius="5"/>

    <!--Control-->
    <Style TargetType="Control" x:Key="BaseControl">
        <Setter Property="Margin" Value="4" />
        <Setter Property="Padding" Value="4" />
    </Style>

    <!--Labele-->

    <Style x:Key="LabelError" TargetType="{x:Type Label}">
        <Setter Property="Height" Value="25"/>
        <Setter Property="Background" Value="Red"/>
    </Style>

    <Style x:Key="LabelStandardowy" TargetType="{x:Type Label}">
        <!--<Setter Property="Height" Value="auto"/>-->
        <Setter Property="Width" Value="auto"/>
        <!--<Setter Property="Background" Value="Azure"/>-->
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="5 5"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="FontSize" Value="18" />
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <Style x:Key="LabelNiski" TargetType="{x:Type Label}" 
           BasedOn="{StaticResource LabelStandardowy}">
        <Setter Property="FontSize" Value="14" />
    </Style>

    <Style x:Key="LabelWaski" TargetType="{x:Type Label}">
        <!--<Setter Property="Height" Value="auto"/>-->
        <Setter Property="Width" Value="auto"/>
        <!--<Setter Property="Background" Value="Azure"/>-->
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="5 5"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="FontSize" Value="18" />
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <Style x:Key="TextBlockStandardowy" TargetType="{x:Type TextBlock}">
        <!--<Setter Property="Height" Value="auto"/>-->
        <Setter Property="Width" Value="auto"/>
        <!--<Setter Property="Background" Value="Azure"/>-->
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="5 5"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="FontSize" Value="18" />
    </Style>

    <Style x:Key="LabelWysrodkowany" TargetType="{x:Type Label}"
           BasedOn="{StaticResource LabelStandardowy}">
        <Setter Property="HorizontalAlignment" Value="Center"/>
    </Style>

    <Style x:Key="LabelNagłówek" TargetType="{x:Type Label}">
        <Setter Property="Height" Value="auto" />
        <Setter Property="Width" Value="auto" />
        <Setter Property="Margin" Value="0 5" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="FontSize" Value="28" />
        <Setter Property="FontStretch" Value="ExtraExpanded" />
        <Setter Property="FontWeight" Value="DemiBold" />
        <Setter Property="FontStyle" Value="Italic" />

    </Style>

    <Style x:Key="TextBlockNagłówek" TargetType="{x:Type TextBlock}">
        <Setter Property="Height" Value="auto" />
        <Setter Property="Width" Value="auto" />
        <Setter Property="Margin" Value="0 5" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="FontSize" Value="24" />
        <Setter Property="FontStretch" Value="ExtraExpanded" />
        <Setter Property="FontWeight" Value="DemiBold" />
        <Setter Property="FontStyle" Value="Italic" />

    </Style>

    <Style x:Key="BaseExpander" TargetType="{x:Type Expander}">
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Foreground" Value="DarkGray"/>
        <Setter Property="Background" Value="LightBlue"/>
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="BorderBrush" Value="Gray" />
        <Setter Property="IsExpanded" Value="true" />
        <Setter Property="FontWeight" Value="Bold" />
    </Style>

    <Style x:Key="ButtonZaokraglony" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{StaticResource ButtonForeground}" />
        <Setter Property="Background" Value="{StaticResource StandardButtonBackground}" />
        <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Margin" Value="10 2" />
        <Setter Property="MaxWidth" Value="200" />
        <Setter Property="MinHeight" Value="30" />
        <Setter Property="Padding" Value="100 1" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="ButtonBorder"
                            BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
                            CornerRadius="5" Background="{TemplateBinding Background}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="ButtonBorder"
                                                Storyboard.TargetProperty="(Border.Background).
                                                    (SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0"
                                         Value="#FFAAAAAA" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <TextBlock Text="{TemplateBinding Content}" 
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                   Padding="{TemplateBinding Padding}"
                                   />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <!-- Lepiej byłoby dać border na transparent, bo Thickness przesuwa wszystkie obiekty na UI -->
                            <!-- Aczykolwiek Thickness na 0 daje efekt 'przyciśnięcia' -->
                            <Setter Property="BorderBrush" TargetName="ButtonBorder" Value="Transparent"/>
                            <Setter Property="Background" TargetName="ButtonBorder" 
                                    Value="{StaticResource StandardButtonPressedBackground}"/>
                            <!--<Setter Property="Background">
                                <Setter.Value>
                                    <SolidColorBrush Color="{StaticResource StandardButtonPressedBackgroundColor}" Opacity="1" />
                                </Setter.Value>
                            </Setter>-->
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background">
                                <Setter.Value>
                                    <SolidColorBrush Color="{StaticResource StandardButtonBackgroundColor}" Opacity="0.5" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="True">
                            <Setter Property="Background">
                                <Setter.Value>
                                    <SolidColorBrush Color="{StaticResource StandardButtonBackgroundColor}" Opacity="1" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <EventTrigger RoutedEvent="MouseEnter">
                <BeginStoryboard>
                    <Storyboard>
                        <!--<ColorAnimation To="{StaticResource StandardButtonMouseEnterBackgroundColor}" 
                                        Duration="0:0:0.1" Storyboard.TargetProperty="Background.Color"/>-->
                        <ColorAnimation To="{StaticResource ButtonMouseEnterBorderBrushColor}" 
                                        Duration="0:0:0.1" Storyboard.TargetProperty="BorderBrush.Color"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="MouseLeave">
                <BeginStoryboard>
                    <Storyboard>
                        <!--<ColorAnimation To="{StaticResource StandardButtonBackgroundColor}" 
                                        Duration="0:0:0.1" Storyboard.TargetProperty="Background.Color"/>-->
                        <ColorAnimation To="{StaticResource ButtonBorderBrushColor}" 
                                        Duration="0:0:0.1" Storyboard.TargetProperty="BorderBrush.Color"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ButtonZaokraglonyCzerwony" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{StaticResource ButtonForeground}"/>
        <Setter Property="Background" Value="{StaticResource RedButtonBackground}" />
        <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderBrush}" />
        <Setter Property="Margin" Value="10 2" />
        <Setter Property="MaxWidth" Value="200" />
        <Setter Property="Padding" Value="100 1" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="ButtonBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" CornerRadius="5" 
                            Background="{TemplateBinding Background}">
                        <TextBlock Text="{TemplateBinding Content}" 
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                   Padding="{TemplateBinding Padding}"
                                   />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <!--<Setter Property="BorderThickness" TargetName="ButtonBorder" Value="0"/>-->
                            <Setter Property="Background" TargetName="ButtonBorder" Value="{StaticResource RedButtonBackgroundPressedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="ButtonBorder" Value="{StaticResource BrushIndianRed}"/>
                        </Trigger>
                        <!--<Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background">
                                <Setter.Value>
                                    <SolidColorBrush Color="{Binding Path=Background}" Opacity="0.5" />
                                </Setter.Value>
                        </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <EventTrigger RoutedEvent="MouseEnter">
                <BeginStoryboard>
                    <Storyboard>
                        <!--<ColorAnimation To="{StaticResource RedButtonMouseEnterBackgroundColor}" Duration="0:0:0.1" Storyboard.TargetProperty="Background.Color"/>-->
                        <ColorAnimation To="{StaticResource ButtonMouseEnterBorderBrushColor}" Duration="0:0:0.1" Storyboard.TargetProperty="BorderBrush.Color"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="MouseLeave">
                <BeginStoryboard>
                    <Storyboard>
                        <ColorAnimation To="{StaticResource RedButtonBackgroundColor}" Duration="0:0:0.1" Storyboard.TargetProperty="Background.Color"/>
                        <ColorAnimation To="{StaticResource ButtonBorderBrushColor}" Duration="0:0:0.1" Storyboard.TargetProperty="BorderBrush.Color"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ButtonZamkniecia" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{StaticResource ButtonForeground}"/>
        <Setter Property="Background" Value="{StaticResource CloseButtonBackground}" />
        <Setter Property="BorderBrush" Value="{StaticResource BorderLightBrush}" />
        <Setter Property="ToolTip" Value="Close this Window" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="ButtonBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" CornerRadius="3" 
                            Background="{TemplateBinding Background}">
                        <TextBlock Text="{TemplateBinding Content}" 
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                   Padding="{TemplateBinding Padding}"
                                   />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderThickness" TargetName="ButtonBorder" Value="0"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <EventTrigger RoutedEvent="MouseEnter">
                <BeginStoryboard>
                    <Storyboard>
                        <ColorAnimation To="{StaticResource CloseButtonBackgroundMouseEnterColor}" Duration="0:0:0.1" Storyboard.TargetProperty="Background.Color"/>
                        <ColorAnimation To="{StaticResource ButtonMouseEnterBorderBrushColor}" Duration="0:0:0.1" Storyboard.TargetProperty="BorderBrush.Color"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="MouseLeave">
                <BeginStoryboard>
                    <Storyboard>
                        <ColorAnimation To="{StaticResource CloseButtonBackgroundColor}" Duration="0:0:0.1" Storyboard.TargetProperty="Background.Color"/>
                        <ColorAnimation To="{StaticResource BorderLightColor}" Duration="0:0:0.1" Storyboard.TargetProperty="BorderBrush.Color"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ButtonKomend" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{StaticResource ButtonForeground}" />
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Margin" Value="10 7" />
        <Setter Property="MaxWidth" Value="300" />
        <Setter Property="MinWidth" Value="140" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">

                    <Border x:Name="ButtonBorder"
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            CornerRadius="5" 
                            Effect="{StaticResource StandardowyShadow}"
                            Background="{StaticResource ContentAreaLinearGradientBrush}">
                        <TextBlock Text="{TemplateBinding Content}" 
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                   Padding="{TemplateBinding Padding}"
                                   />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="ButtonBorder">
                                <Setter.Value>
                                    <!--<SolidColorBrush Color="{Binding Path=BorderBrush}" Opacity="0.7" />-->
                                    <SolidColorBrush Color="{StaticResource CommandButtonMouseEnterBackgroundColor}" Opacity="0.7" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderBrush" TargetName="ButtonBorder" 
                                    Value="{StaticResource BorderDarkBrush}"/>
                            <Setter Property="BorderThickness" TargetName="ButtonBorder" 
                                    Value="0"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ButtonStandardowy" TargetType="{x:Type Button}">
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="MinWidth" Value="100"/>
        <Setter Property="HorizontalAlignment" Value="center"/>
        <Setter Property="IsEnabled" Value="True"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{StaticResource ButtonForeground}" />
        <Setter Property="Background" Value="{StaticResource StandardButtonBackgroundColor}" />
        <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Margin" Value="10 2" />
        <Setter Property="Padding" Value="20 1" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="ButtonBorder"
                        BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
                        CornerRadius="5" Background="{TemplateBinding Background}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="ButtonBorder"
                                            Storyboard.TargetProperty="(Border.Background).
                                                (SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0"
                                        Value="#FFAAAAAA" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <TextBlock x:Name="ButtonContent"
                            Text="{TemplateBinding Content}" 
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Padding="{TemplateBinding Padding}"
                            />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderThickness" TargetName="ButtonBorder" Value="0"/>
                            <Setter Property="Foreground" TargetName="ButtonContent" 
                                    Value="{StaticResource BrushWhite}" />
                            <Setter Property="Background" TargetName="ButtonBorder" 
                                    Value="{StaticResource StandardButtonPressedBackground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <EventTrigger RoutedEvent="MouseEnter">
                <BeginStoryboard>
                    <Storyboard>
                        <ColorAnimation To="{StaticResource StandardButtonMouseEnterBackgroundColor}" 
                                    Duration="0:0:0.1" Storyboard.TargetProperty="Background.Color"/>
                        <ColorAnimation To="{StaticResource ButtonMouseEnterBorderBrushColor}" 
                                    Duration="0:0:0.1" Storyboard.TargetProperty="BorderBrush.Color"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="MouseLeave">
                <BeginStoryboard>
                    <Storyboard>
                        <ColorAnimation To="{StaticResource StandardButtonBackgroundColor}" 
                                    Duration="0:0:0.1" Storyboard.TargetProperty="Background.Color"/>
                        <ColorAnimation To="{StaticResource ButtonBorderBrushColor}" 
                                    Duration="0:0:0.1" Storyboard.TargetProperty="BorderBrush.Color"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="CloseButton" TargetType="{x:Type Button}"
         BasedOn="{StaticResource BaseControl}">
        <Setter Property="Padding" Value="4,-2,4,1" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="ToolTip" Value="Zamknij Okno" />
    </Style>

    <Style x:Key="CancelButton" TargetType="{x:Type Button}"
         BasedOn="{StaticResource ButtonZaokraglonyCzerwony}">
        <Setter Property="Effect"
            Value="{StaticResource StandardowyShadow}" />
        <Setter Property="MinWidth" Value="85" />
        <Setter Property="MaxWidth" Value="85" />
    </Style>
    <Style x:Key="SubmitButton" TargetType="{x:Type Button}"
         BasedOn="{StaticResource ButtonZaokraglony}">
        <Setter Property="MinWidth" Value="85" />
        <Setter Property="MaxWidth" Value="85" />
        <Setter Property="Effect"
            Value="{StaticResource StandardowyShadow}" />
    </Style>

    <!--Text Boxy-->

    <Style x:Key="TextBoxWysrodkowany" TargetType="{x:Type TextBox}">
        <Setter Property="Width" Value="140"/>
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Margin" Value="10"/>
    </Style>

    <Style x:Key="TextBoxStandardowy" TargetType="{x:Type TextBox}">
        <Setter Property="MinWidth" Value="170"/>
        <Setter Property="TextAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Margin" Value="5 2"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="MaxLength" Value="20"/>
    </Style>

    <!--Dzięki implementacji walidacji w środku TextBox'a, wiadomości
    nie będą nachodziły na inne elemnty interfejsu-->
    <Style x:Key="TextBoxZaokraglony" TargetType="{x:Type TextBox}">
        <Setter Property="MinWidth" Value="170"/>
        <Setter Property="TextAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Margin" Value="5 2"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="MaxLength" Value="20"/>
        <Setter Property="BorderBrush" Value="{StaticResource DeafultBorderBrush}"/>
        <Setter Property="Background" Value="{StaticResource BrushGainsboro}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <!--Aby nie roziciągać ramki na textbox i error message-->
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <AdornedElementPlaceholder/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <StackPanel>
                        <Border x:Name="TextBoxBorder" CornerRadius="5" BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}">
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal" />

                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="TextBoxBorder"
                                                Storyboard.TargetProperty="(Panel.Background).
                                            (SolidColorBrush.Color)">
                                                <EasingColorKeyFrame KeyTime="0"
                                         Value="{StaticResource DisabledBorderLightColor}" />
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="ReadOnly">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="TextBoxBorder"
                                                Storyboard.TargetProperty="(Panel.Background).
                                             (SolidColorBrush.Color)">
                                                <EasingColorKeyFrame KeyTime="0"
                                         Value="{StaticResource DisabledBorderDarkColor}" />
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <ScrollViewer x:Name="PART_ContentHost"
                            Focusable="false"
                            HorizontalScrollBarVisibility="Hidden"
                            VerticalScrollBarVisibility="Hidden"
                            HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Padding="{TemplateBinding Padding}" Margin="{TemplateBinding Margin}"
                            MinWidth="{TemplateBinding MinWidth}" FontSize="{TemplateBinding FontSize}"          
                        />
                        </Border>
                        <ItemsControl Margin="0 5 0 0" FontSize="12" ItemsSource="{TemplateBinding Validation.Errors}">
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Foreground="{StaticResource BrushRed}" Text="{Binding ErrorContent}"/>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="TextBoxBorder" 
                                    Value="{StaticResource BorderDeepDarkBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="TextBoxBorder" 
                                    Value="{StaticResource BorderDarkBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PasswordBoxZaokraglony" TargetType="{x:Type PasswordBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="FontFamily" Value="Verdana" />
        <Setter Property="PasswordChar" Value="*" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="MinHeight" Value="20" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="BorderBrush" Value="{StaticResource DeafultBorderBrush}"/>
        <Setter Property="Background" Value="{StaticResource BrushGainsboro}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Margin" Value="5 2"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Border x:Name="PasswordBoxBorder"
                            CornerRadius="5" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            >
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="Disabled" />
                                <VisualState x:Name="MouseOver" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ScrollViewer x:Name="PART_ContentHost" 
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                      HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      Padding="{TemplateBinding Padding}" Margin="{TemplateBinding Margin}">
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="PasswordBoxBorder" 
                                    Value="{StaticResource BorderDeepDarkBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="PasswordBoxBorder" 
                                    Value="{StaticResource BorderDarkBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TextBox}">
        <Setter Property="MinWidth" Value="140"/>
        <Setter Property="TextAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Margin" Value="5 2"/>
    </Style>

    <Style x:Name="TextBoxAlfabet" TargetType="{x:Type custom:AlphabetTextBox}" BasedOn="{StaticResource TextBoxZaokraglony}">

    </Style>

    <Style x:Name="TextBoxNumeryczny" TargetType="{x:Type custom:NumericTextBox}" BasedOn="{StaticResource TextBoxZaokraglony}">

    </Style>

    <Style x:Name="TextBoxEmail" TargetType="{x:Type custom:EmailTextBox}" BasedOn="{StaticResource TextBoxZaokraglony}">
        <Setter Property="MaxLength" Value="30"/>
        <Setter Property="MinWidth" Value="200"/>
    </Style>

    <Style x:Key="TextBoxNiski" TargetType="{x:Type TextBox}" 
           BasedOn="{StaticResource TextBoxZaokraglony}">
        <Setter Property="FontSize" Value="12"/>
    </Style>

    <!--ComboBox-->
    <Style x:Key="ComboBoxStandardowy" TargetType="{x:Type ComboBox}">
        <Setter Property="Margin" Value="5 2" />
        <Setter Property="MaxWidth" Value="160" />
        <Setter Property="MinWidth" Value="160" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <!--<Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />-->
    </Style>

    <Style x:Key="ComboBoxNiski" TargetType="{x:Type ComboBox}"
           BasedOn="{StaticResource ComboBoxZaokraglony}">
        <Setter Property="FontSize" Value="14"/>
    </Style>

    <!--Date Picker-->
    <Style x:Key="DatePickerStandardowy" TargetType="{x:Type DatePicker}">
        <Setter Property="MinWidth" Value="170" />
        <Setter Property="SelectedDate" Value="{x:Static sys:DateTime.Now}" />
        <Setter Property="DisplayDate" Value="{x:Static sys:DateTime.Now}" />
        <Setter Property="Margin" Value="5 2" />
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <Style x:Key="RedDatePicker" TargetType="{x:Type DatePicker}" BasedOn="{StaticResource DatePickerStandardowy}">
        <Setter Property="Foreground" Value="Red" />
    </Style>

    <!--Border-->
    <Style TargetType="{x:Type Border}" x:Key="WorkspaceBorder">
        <Setter Property="Background" Value="{StaticResource ScreenBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="#FF5F5F5F" />
        <Setter Property="CornerRadius" Value="5" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="12" />
        <Setter Property="Margin" Value="16" />
    </Style>

    <!--List Box-->
    <Style TargetType="ListBox" x:Key="ValidationArea"
         BasedOn="{StaticResource CustomListBox}">
        <Setter Property="BorderBrush" Value="Red" />
        <Setter Property="BorderThickness" Value="2" />
    </Style>

    <!--User Control-->
    <Style TargetType="{x:Type UserControl}"
         x:Key="CustomUserControl">
        <Style.Triggers>
            <Trigger Property="IsVisible" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                 From="0"
                                 To="1"
                                 Duration="00:00:01" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                 From="1"
                                 To="0"
                                 Duration="00:00:00.05" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type ListViewItem}" x:Key="ListViewItemWysrodkowany">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="5 20"/>
    </Style>

    
    <!--Konwertery-->
    <BooleanToVisibilityConverter x:Key="BoolToVisibility" />
    <converters:InvertBooleanConverter x:Key="InvertedBool"/>
    <converters:DateToStringConverter x:Key="DateToString"/>
    <converters:EnumStringToStringConverter x:Key="EnumStringToString"/>
    <converters:AdresDtoToStringConverter x:Key="AdresDtoToString"/>
    <converters:AdresToStringConverter x:Key="AdresToString"/>
    <converters:EnumToCollectionConverter x:Key="EnumToCollection"/>
    <converters:DictEntityToStringConverter x:Key="DictEntityToString"/>
    <converters:ObjectToVisibiltyConverter x:Key="ObjectToVisibility"/>

</ResourceDictionary>